<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Test Results</title>
</head>
<body>
    <h1>Product Test Results</h1>
    <button onclick="clearData()">Clear Boards Data</button>
    <input type="file" id="fileInput" accept=".xlsx">
    <button onclick="uploadFile()">Upload the File~</button>
    <select id="collectionSelect" onchange="fetchData()">
        <option value="">Select Collection</option>
    </select>
    <table id="resultsTable" border="1">
        <tr>
            <th>board_serial_number</th>
            <th>test_time_and_date</th>
            <th>Pass_or_Fail</th>
            <th>failed_test</th>
            <th>customer_FW_version</th>
        </tr>
    </table>
    <script>
        async function fetchCollections() {
            try {
                const response = await fetch('/collections');
                const collections = await response.json();
                const select = document.getElementById('collectionSelect');
                collections.forEach(collection => {
                    const option = document.createElement('option');
                    option.value = collection;
                    option.text = collection;
                    select.add(option);
                });
            } catch (error) {
                console.error('Error fetching collections:', error);
            }
        }

        async function fetchData() {
            const collectionName = document.getElementById('collectionSelect').value;
            if (!collectionName) {
                return;
            }
            try {
                const response = await fetch(`/collections/${collectionName}`);
                const data = await response.json();
                const table = document.getElementById('resultsTable');
                // 清空表格数据
                const rows = table.getElementsByTagName('tr');
                while (rows.length > 1) {
                    table.deleteRow(1);
                }
                data.forEach(test => {
                    const row = table.insertRow();
                    row.insertCell(0).innerText = test.board_serial_number;
                    row.insertCell(1).innerText = new Date(test.test_time_and_date).toLocaleDateString();
                    row.insertCell(2).innerText = test.Pass_or_Fail;
                    row.insertCell(3).innerText = test.failed_test;
                    row.insertCell(4).innerText = test.customer_FW_version;
                });
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        async function clearData() {
            const collectionName = document.getElementById('collectionSelect').value;
            if (!collectionName) {
                alert('Please select a collection to clear');
                return;
            }
            try {
                const response = await fetch(`/collections/${collectionName}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    alert('Data cleared successfully');
                    fetchData();  // Refresh the data
                } else {
                    const errorData = await response.json();
                    alert(`For some reason cannot clear data: ${errorData.error}`);
                }
            } catch (error) {
                console.error('Error clearing data:', error);
            }
        }

        async function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (!file) {
                alert('Please select an Excel file(full path)');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    alert('File uploaded and data imported successfully');
                    location.reload();  // Reload the page to refresh the data
                } else {
                    const errorData = await response.json();
                    alert(`Error uploading file: ${errorData.error}`);
                }
            } catch (error) {
                console.error('Error uploading file:', error);
                alert('For some reason cannot upload file');
            }
        }

        window.onload = fetchCollections;
    </script>
</body>
</html>