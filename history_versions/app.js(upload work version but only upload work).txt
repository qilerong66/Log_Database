const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const multer = require('multer');
const xlsx = require('xlsx');
const path = require('path');

// 连接到MongoDB数据库
mongoose.connect('mongodb://localhost:27017/productTests', { useNewUrlParser: true, useUnifiedTopology: true });

// 定义数据模型
const testSchema = new mongoose.Schema({
    board_serial_number: String,
    test_time_and_date: String,
    Pass_or_Fail: String,
    failed_test: String,
    customer_FW_version: String
});

const Test = mongoose.model('Test', testSchema);

const app = express();
app.use(bodyParser.json());

// 设置文件上传
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
});
const upload = multer({ storage: storage });

// 提供静态文件
app.use(express.static('public'));

app.get('/tests', (req, res) => {
    Test.find()
        .then(tests => res.status(200).json(tests))
        .catch(err => res.status(500).json({ error: 'Could not fetch the documents' }));
});

app.delete('/tests', (req, res) => {
    Test.deleteMany({})
        .then(() => {
            console.log('Data cleared successfully');
            res.status(200).send('Data cleared successfully');
        })
        .catch(err => {
            console.error('Error clearing data:', err);
            res.status(500).json({ error: 'Could not clear the data' });
        });
});

app.post('/upload', upload.single('file'), (req, res) => {
    if (!req.file) {
        return res.status(400).json({ error: 'No file uploaded' });
    }

    // 打印 req.file 对象以调试路径问题
    console.log('Uploaded file details:', req.file);

    const filePath = req.file.path; // 直接使用 req.file.path
    console.log('File path:', filePath); // 打印文件路径

    try {
        const workbook = xlsx.readFile(filePath);
        const sheet_name_list = workbook.SheetNames;
        const xlData = xlsx.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);

        // 预处理数据，将 customer_FW_version 为空字符串的项转换为 "None"
        const processedData = xlData.map(item => {
            if (item.customer_FW_version === "") {
                item.customer_FW_version = "None";
            }
            return item;
        });

        const collectionName = path.basename(req.file.originalname, path.extname(req.file.originalname));
        const DynamicModel = mongoose.model(collectionName, testSchema);

        DynamicModel.insertMany(processedData)
            .then(() => {
                console.log('Data imported successfully');
                res.status(200).send('Data imported successfully');
            })
            .catch(err => {
                console.error('Error importing data:', err);
                res.status(500).json({ error: 'Could not import the data' });
            });
    } catch (err) {
        console.error('Error reading file:', err);
        res.status(500).json({ error: 'Could not read the file' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});